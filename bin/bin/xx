#!/usr/bin/env bash

# UTF-8转换脚本
# 用法: ./xx [文件或目录路径]

# 检查是否提供了参数
if [[ $# -eq 0 ]]; then
    echo "用法: $0 [文件或目录路径]"
    echo "示例:"
    echo "  $0 file.csv        # 转换单个CSV文件"
    echo "  $0 directory/      # 转换目录下所有CSV文件"
    exit 1
fi

TARGET="$1"

# 检查目标是否存在
if [[ ! -e "$TARGET" ]]; then
    echo "错误: '$TARGET' 不存在"
    exit 1
fi

# 处理单个文件或目录
process_file() {
    local file="$1"
    local ext="${file##*.}"
    
    # 只处理CSV文件
    if [[ "$ext" != "csv" ]]; then
        return 0
    fi
    
    echo "处理: $file"
    
    # 检测当前编码
    encoding=$(file -i "$file" | sed 's/.*charset=//' | cut -d';' -f1)
    
    # 如果不是UTF-8，则转换
    if [[ "$encoding" != "utf-8" ]] && [[ "$encoding" != "us-ascii" ]]; then
        echo "  转换编码: $encoding → UTF-8"
        
        # 备份原文件
        cp "$file" "${file}.backup"
        
        # 尝试GB18030编码转换并添加BOM
        if iconv -f GB18030 -t UTF-8 "$file" -o "${file}.utf8" 2>/dev/null; then
            # 添加UTF-8 BOM (0xEF 0xBB 0xBF)
            printf '\xEF\xBB\xBF' | cat - "${file}.utf8" > "$file"
            rm "${file}.backup" "${file}.utf8"
            echo "  ✓ 转换成功 (UTF-8 with BOM)"
        else
            echo "  ✗ 转换失败，保留原文件"
            rm "${file}.utf8"
        fi
    elif [[ "$encoding" == "utf-8" ]]; then
        echo "  添加BOM到现有UTF-8文件"
        cp "$file" "${file}.backup"
        printf '\xEF\xBB\xBF' | cat - "$file" > "${file}.withbom"
        mv "${file}.withbom" "$file"
        rm "${file}.backup"
        echo "  ✓ 已添加BOM"
    else
        echo "  ✓ 已是UTF-8编码"
    fi
}

# 如果是单个文件
if [[ -f "$TARGET" ]]; then
    echo "正在处理文件: $TARGET"
    process_file "$TARGET"
    
    # 验证结果
    echo "验证结果:"
    echo "  $(file -i "$TARGET")"
    
    echo "转换完成！"
    exit 0
fi

# 如果是目录
echo "正在处理目录: $TARGET"

# 转换CSV文件为UTF-8
find "$TARGET" -name "*.csv" | while read file; do
    process_file "$file"
done

echo "转换完成！"

# 验证结果
echo "验证结果:"
find "$TARGET" -name "*.csv" | head -3 | while read file; do
    echo "  $(file -i "$file")"
done
