#!/bin/bash

# 优化版：计算目录中发票文件的总金额
# 用法: ./cal_invoice_optimized [目录1] [目录2...]

# 颜色定义
readonly RED='\033[0;31m'
readonly GREEN='\033[0;32m'
readonly YELLOW='\033[0;33m'
readonly BLUE='\033[0;34m'
readonly NC='\033[0m'

# 全局变量
declare -i total_files=0
grand_total=0.00

# 提取文件金额的核心函数
extract_amount() {
    local filepath=$1
    local filename=$(basename "$filepath")
    local basename=${filename%.*}
    
    # 使用正则表达式提取金额
    if [[ $basename =~ ^[0-9]+_([0-9]+(\.?[0-9]+)?)[^0-9]* ]]; then
        echo "${BASH_REMATCH[1]}"
        return 0
    fi
    
    return 1
}

# 提取文件编号用于排序
extract_number() {
    local filepath=$1
    local filename=$(basename "$filepath")
    local basename=${filename%.*}
    
    if [[ $basename =~ ^([0-9]+)_ ]]; then
        printf "%06d" "${BASH_REMATCH[1]}"
    else
        printf "999999"
    fi
}

# 处理单个目录
process_directory() {
    local dir=$1
    local -i file_count=0
    local dir_total=0.00
    
    echo -e "\n${GREEN}正在处理目录: ${BLUE}$dir${NC}"
    echo "----------------------------------------"
    
    # 收集所有匹配的文件
    local -a files=()
    while IFS= read -r -d '' file; do
        files+=("$file")
    done < <(find "$dir" -maxdepth 1 -type f -name '*_*_*' -print0 2>/dev/null)
    
    if [[ ${#files[@]} -eq 0 ]]; then
        echo -e "${YELLOW}警告: 目录中没有找到匹配的发票文件${NC}"
        return 0
    fi
    
    # 使用关联数组进行排序（更高效）
    declare -A file_map
    for file in "${files[@]}"; do
        local key=$(extract_number "$file")
        file_map["$key"]="$file"
    done
    
    # 按编号排序并处理
    local -a sorted_keys=($(printf '%s\n' "${!file_map[@]}" | sort -n))
    
    for key in "${sorted_keys[@]}"; do
        local file="${file_map[$key]}"
        local amount
        
        if amount=$(extract_amount "$file"); then
            local filename=$(basename "$file")
            ((file_count++))
            dir_total=$(awk -v sum="$dir_total" -v val="$amount" 'BEGIN {printf "%.2f", sum + val}')
            
            printf "%-6s %-10s %-25s\n" "[$file_count]" "¥$amount" "${filename:0:20}..."
        fi
    done
    
    # 更新全局统计
    ((total_files += file_count))
    grand_total=$(awk -v sum="$grand_total" -v val="$dir_total" 'BEGIN {printf "%.2f", sum + val}')
    
    echo "----------------------------------------"
    printf "%-15s: %5d 个文件\n" "本目录数量" "$file_count"
    printf "%-15s: ¥%'.2f\n" "本目录金额" "$dir_total"
}

# 主程序
main() {
    local -a directories=()
    
    # 处理参数
    if [[ $# -eq 0 ]]; then
        directories=(".")
    else
        for dir in "$@"; do
            if [[ -d "$dir" ]]; then
                directories+=("$dir")
            else
                echo -e "${RED}错误: 目录 '$dir' 不存在${NC}" >&2
            fi
        done
        
        if [[ ${#directories[@]} -eq 0 ]]; then
            echo -e "${RED}错误: 没有有效的目录可处理${NC}" >&2
            return 1
        fi
    fi
    
    for dir in "${directories[@]}"; do
        process_directory "$dir"
    done
    
    # 显示汇总信息（处理多个目录时）
    if [[ ${#directories[@]} -gt 1 ]]; then
        echo -e "\n${GREEN}============ 全局汇总 ============${NC}"
        printf "%-15s: %5d 个文件\n" "总计文件数" "$total_files"
        printf "%-15s: ¥%'.2f\n" "总计金额" "$grand_total"
        printf "%-15s: %d 个目录\n" "扫描目录数" "${#directories[@]}"
        echo "========================================"
    fi
}

# 执行主程序
main "$@"