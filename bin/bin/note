#!/usr/bin/env bash

note_dir="${NOTE_DIR:-$HOME/note/local}"
default_date=$(date +%Y-%m-%d)
date="${2:-$default_date}"
note_file="$note_dir/$date.md"

# ANSI 颜色
RED="\033[31m"
GREEN="\033[32m"
YELLOW="\033[33m"
CYAN="\033[36m"
RESET="\033[0m"

# 函数：输出错误信息
error() {
    printf "${RED}Error:${RESET} %s\n" "$1" >&2
}

# 函数：输出普通信息
info() {
    printf "${CYAN}%s${RESET}\n" "$1"
}

# 函数：输出帮助信息
print_help() {
    printf "${YELLOW}Usage:${RESET}\n"
    printf "  note add <content>         - Add a new note to today's file\n"
    printf "  note open [date]           - Open note (default: today)\n"
    printf "  note list                  - List all available notes\n"
    printf "  note search <keyword>      - Search all notes for keyword\n"
    printf "  note delete [date]         - Delete note file (default: today)\n"
    printf "  note help                  - Show this help message\n\n"
    printf "${YELLOW}Examples:${RESET}\n"
    printf "  note add \"Meeting with Alice\"\n"
    printf "  note open 2025-06-30\n"
    printf "  note delete 2025-06-01\n"
}

# 确保笔记目录存在
mkdir -p "$note_dir" || {
    error "Failed to create directory $note_dir"
    exit 1
}

case "$1" in
    add)
        shift
        content="$*"
        if [[ -z "$content" ]]; then
            error "No content provided for note."
            exit 1
        fi
        timestamp=$(date +"%H:%M:%S")
        echo "[$timestamp] $content" >> "$note_file" || {
            error "Failed to write to $note_file"
            exit 1
        }
        info "Note added to $note_file"
        ;;

    open)
        [[ -f "$note_file" ]] || touch "$note_file" || {
            error "Failed to create $note_file"
            exit 1
        }
        editor="${EDITOR:-nvim}"
        info "Opening $note_file in $editor"
        if [[ "$editor" == *vim* || "$editor" == *nvim* ]]; then
            "$editor" -c "cd $note_dir" -c "lcd $note_dir" "$note_file"
        else
            (cd "$note_dir" && "$editor" "$note_file")
        fi
        ;;

    list)
        if [[ -d "$note_dir" && "$(ls -A "$note_dir")" ]]; then
            printf "${YELLOW}Available notes in %s:${RESET}\n" "$note_dir"
            ls -lh "$note_dir" | grep -v '^total' | sort -r
        else
            info "No notes found in $note_dir"
        fi
        ;;

    search)
        if [[ -z "$2" ]]; then
            error "No search term provided."
            exit 1
        fi
        term="$2"
        info "Searching for \"$term\" in notes:"
        grep -rn --color=always "$term" "$note_dir"/*.md 2>/dev/null || {
            info "No matches found."
        }
        ;;

    delete)
        [[ -f "$note_file" ]] || {
            error "Note file $note_file does not exist."
            exit 1
        }
        read -rp "Are you sure you want to delete $note_file? (y/n) " confirm
        if [[ "$confirm" == [yY]* ]]; then
            rm "$note_file" && info "Note deleted: $note_file"
        else
            info "Deletion cancelled."
        fi
        ;;

    help|--help|-h|"")
        print_help
        ;;

    *)
        error "Unknown command: $1"
        print_help
        exit 1
        ;;
esac

